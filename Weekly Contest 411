1) Count Substrings That Satisfy K-Constraint I_

  class Solution {
    public int countKConstraintSubstrings(String s, int k) {
        int zeroCount=0;
        int oneCount=0;
        int start=0;
        int result=0;
        
        if(k>=s.length()){
            return s.length()*(s.length()+1)/2;
        }
            for (int end=0; end< s.length();end++){
                if(s.charAt(end)=='0'){
                    zeroCount++;
                }else{
                    oneCount++;
                }
                
                while( zeroCount>k&&oneCount>k){
                    if(s.charAt(start)=='0'){
                        zeroCount--;
                        
                    }else{
                        oneCount--;
                    }
                    start++;
                }
                result+=(end-start+1);
                
            }
        return result;
        
    }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

2) Maximum Energy Boost From Two Drinks_
  
class Solution {
    public long maxEnergyBoost(int[] energyDrinkA, int[] energyDrinkB) {
        int n=energyDrinkA.length;
        
        long[] dpA= new long[n];
        long[] dpB= new long[n];
        
        dpA[0]= energyDrinkA[0];
        dpB[0]= energyDrinkB[0];
        
        for(int i=1; i<n;i++){
            dpA[i]= Math.max(dpA[i-1]+ energyDrinkA[i],dpB[i-1]);
            dpB[i]= Math.max(dpB[i-1]+ energyDrinkB[i],dpA[i-1]);
        }
        return Math.max(dpA[n-1],dpB[n-1]);
                        
    }
}

